Fuck recursion, I'm gonna do the memoization to make it optimized.

#include <iostream>
using namespace std;

int max(int a, int b){
    if(a>b){
        return a;
    }else{
        return b;
    }
}

int knapsack(int n, int wt[], int val[], int W){
	int K[n+1][W+1];
	int i,w;
	for(i=0;i<=n;i++){
		for(w=0;w<=W;w++){
			if(i==0 || W==0){
        	  	K[i][w]=0;
    		}else if (wt[i - 1] <= w){ 
                K[i][w] = max( 
                    val[i - 1] + K[i - 1][w - wt[i - 1]], 
                    K[i - 1][w]); 
		}
            else{
               K[i][w] = K[i - 1][w]; 		
            }
        }
	}
	return K[n][W];
}

int main() {
    int t;
    cin>>t;
    while(t--){
    int n;
    cin>>n;
    int W;
    cin>>W;
    int val[n];
    for(int i=0;i<n;i++){
        cin>>val[i];
    }
    int wt[n];
    for(int i=0;i<n;i++){
        cin>>wt[i];
    }
    cout<<knapsack( n,  wt,  val,  W )<<endl;
    }
    return 0;
}
